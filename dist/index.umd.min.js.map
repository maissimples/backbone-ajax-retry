{"version":3,"file":"index.umd.min.js","sources":["../src/linearDelay.ts","../src/hasRetryableStatus.ts","../src/JQueryXHR.ts","../src/setupBackboneAjaxRetry.ts","../src/createAjaxWithRetry.ts","../src/createSyncWithRetry.ts"],"sourcesContent":["import type { BackboneAjaxRetryDelay } from './types';\n\nfunction linearDelay(delayFactor: number = 100): BackboneAjaxRetryDelay {\n  return (retry: number): number => retry * delayFactor;\n}\n\nexport default linearDelay;\n","/** Both `Too Many Requests` and `Request Timeout` statuses are retryable. */\nconst RETRYABLE_STATUSES = [408, 429];\n\n/** Checks if jQuery ajax returns a response with a retryable status. */\nfunction hasRetryableStatus(jqXHR: JQueryXHR): boolean {\n  return (\n    RETRYABLE_STATUSES.includes(jqXHR.status) ||\n    (jqXHR.status >= 500 && jqXHR.status <= 599)\n  );\n}\n\nexport default hasRetryableStatus;\n","/* eslint @typescript-eslint/no-explicit-any: off */\n\nimport $ from 'jquery';\n\ntype JQueryXHRStatic<T> = Omit<JQuery.jqXHR<T>, keyof JQuery.Promise<any>>;\n\nfunction createGetterDescriptor<T>(get: () => T): PropertyDescriptor {\n  return {\n    get,\n    enumerable: true,\n    configurable: true,\n  };\n}\n\nexport type JQueryXHRAsProxyOptions<T = any> = {\n  context: { jqXHR: JQuery.jqXHR<T> };\n  onAbort: (statusText?: string) => void;\n  onError: (\n    this: JQuery.AjaxSettings,\n    jqXHR: JQuery.jqXHR<T>,\n    status: JQuery.Ajax.ErrorTextStatus,\n    statusText: string,\n  ) => JQuery.Promise<any>;\n};\n\nclass JQueryXHR {\n  static asProxy<T>(options: JQueryXHRAsProxyOptions<T>): JQuery.jqXHR<T> {\n    const { context, onAbort, onError } = options;\n\n    const jqXHR = Object.assign(context.jqXHR.catch(onError), {\n      abort: onAbort,\n      getAllResponseHeaders: (): string => {\n        return context.jqXHR.getAllResponseHeaders() ?? '';\n      },\n      getResponseHeader: (name: string): string | null => {\n        return context.jqXHR.getResponseHeader(name) ?? null;\n      },\n      overrideMimeType: (mime: string) => {\n        context.jqXHR.overrideMimeType(mime);\n      },\n      setRequestHeader: (name: string, value: string) => {\n        context.jqXHR.setRequestHeader(name, value);\n      },\n      statusCode: (map: JQuery.Ajax.StatusCodeCallbacks<any>) => {\n        context.jqXHR.statusCode(map);\n      },\n    }) as Partial<JQuery.jqXHR<T>>;\n\n    Object.defineProperties(jqXHR, {\n      readyState: createGetterDescriptor(() => context.jqXHR.readyState),\n      responseText: createGetterDescriptor(() => context.jqXHR.responseText),\n      responseXML: createGetterDescriptor(() => context.jqXHR.responseXML),\n      responseJSON: createGetterDescriptor(() => context.jqXHR.responseJSON),\n      status: createGetterDescriptor(() => context.jqXHR.status),\n      statusText: createGetterDescriptor(() => context.jqXHR.statusText),\n    });\n\n    return jqXHR as JQuery.jqXHR<T>;\n  }\n\n  static asAborted<T>(settings: JQueryAjaxSettings): JQuery.jqXHR<T> {\n    const deferred = $.Deferred<any>();\n\n    const jqXHR = deferred.promise<JQueryXHRStatic<T>>({\n      status: 0,\n      statusText: 'abort',\n      abort: $.noop,\n      statusCode: $.noop,\n      getResponseHeader: () => null,\n      getAllResponseHeaders: () => '',\n      readyState: 0,\n      responseText: '',\n      overrideMimeType: $.noop,\n      setRequestHeader: $.noop,\n    });\n\n    deferred.rejectWith(settings, [jqXHR, 'abort', 'abort']);\n\n    return jqXHR as JQuery.jqXHR<T>;\n  }\n}\n\nexport default JQueryXHR;\n","import type { Backbone, BackboneAjaxRetrySettings } from './types';\nimport linearDelay from './linearDelay';\nimport hasRetryableStatus from './hasRetryableStatus';\nimport createAjaxWithRetry from './createAjaxWithRetry';\nimport createSyncWithRetry from './createSyncWithRetry';\n\nfunction setupBackboneAjaxRetry(\n  backbone: Backbone,\n  settings?: BackboneAjaxRetrySettings,\n): void {\n  backbone.retry = {\n    delay: settings?.delay ?? linearDelay(200),\n    retries: settings?.retries ?? 3,\n    condition: settings?.condition ?? hasRetryableStatus,\n  };\n\n  backbone.$.ajaxPrefilter((settings) => {\n    // Assigns as the first try when it doesn't have 'tries' number.\n    settings.tries ??= 1;\n  });\n\n  backbone.ajax = createAjaxWithRetry(backbone);\n\n  backbone.sync = createSyncWithRetry(backbone);\n}\n\nexport default setupBackboneAjaxRetry;\n","/* eslint @typescript-eslint/no-explicit-any: 'off' */\n\nimport JQueryXHR from './JQueryXHR';\nimport type { Backbone, BackboneAjax } from './types';\n\ntype TimeoutId = ReturnType<typeof setTimeout>;\n\ntype Context<T = any> = {\n  delay?: {\n    timeoutId: TimeoutId;\n    deferred: JQuery.Deferred<any>;\n  };\n  jqXHR: JQuery.jqXHR<T>;\n  settings: JQueryAjaxSettings;\n};\n\nfunction createAjaxWithRetry(backbone: Backbone): BackboneAjax {\n  const ORIGINAL_AJAX = backbone.ajax;\n\n  return (settings = {}) => {\n    const context: Context = {\n      jqXHR: ORIGINAL_AJAX.call(backbone, settings),\n      settings,\n    };\n\n    function handleError(\n      this: JQuery.AjaxSettings,\n      jqXHR: JQuery.jqXHR,\n      status: JQuery.Ajax.ErrorTextStatus,\n      statusText: string,\n    ): JQuery.jqXHR | JQuery.Deferred<any> {\n      // We ensure 'tries' are defined using an '$.ajaxFilter' in the setup.\n      const tries = this.tries!;\n      const retries = settings.retries ?? backbone.retry.retries;\n      const skipRetryOnCreate = !this.backbone?.model?.retryOnCreate;\n      const methodIsCreate = this.backbone?.sync?.method === 'create';\n\n      const skipRetry =\n        tries > retries ||\n        (skipRetryOnCreate && methodIsCreate) ||\n        !backbone.retry.condition(\n          jqXHR,\n          this.backbone?.model,\n          this.backbone?.sync?.method,\n        );\n\n      const deferred = backbone.$.Deferred();\n\n      if (skipRetry)\n        return deferred.rejectWith(this, [jqXHR, status, statusText]);\n\n      const timeoutId = setTimeout(\n        () => {\n          delete context.delay;\n          context.jqXHR = ORIGINAL_AJAX.call(backbone, this);\n          deferred.resolve(\n            JQueryXHR.asProxy<any>({\n              context,\n              onAbort: handleAbort,\n              onError: handleError,\n            }),\n          );\n        },\n        backbone.retry.delay(tries, jqXHR),\n      );\n\n      context.settings = this;\n      context.delay = { deferred, timeoutId };\n\n      this.tries = tries + 1;\n\n      return deferred;\n    }\n\n    function handleAbort(statusText?: string) {\n      if (!context.delay) {\n        context.jqXHR.abort(statusText);\n        return;\n      }\n\n      const { deferred, timeoutId } = context.delay;\n\n      delete context.delay;\n      clearTimeout(timeoutId);\n      deferred.rejectWith(context.settings, [\n        JQueryXHR.asAborted(context.settings),\n        'abort',\n        'abort',\n      ]);\n    }\n\n    return JQueryXHR.asProxy<any>({\n      context,\n      onError: handleError,\n      onAbort: handleAbort,\n    });\n  };\n}\n\nexport default createAjaxWithRetry;\n","import type { Backbone, BackboneSync } from './types';\n\nfunction createSyncWithRetry(backbone: Backbone): BackboneSync {\n  const ORIGINAL_SYNC = backbone.sync;\n\n  return function (this: Backbone, method, model, settings = {}) {\n    settings.retries = settings.retries ?? model.retries;\n\n    settings.backbone = {\n      model,\n      sync: { method },\n    };\n\n    return ORIGINAL_SYNC.call(this, method, model, settings);\n  };\n}\n\nexport default createSyncWithRetry;\n"],"names":["linearDelay","delayFactor","retry","RETRYABLE_STATUSES","hasRetryableStatus","jqXHR","includes","status","createGetterDescriptor","get","enumerable","configurable","JQueryXHR","asProxy","options","context","onAbort","onError","Object","assign","catch","abort","getAllResponseHeaders","_a","getResponseHeader","name","overrideMimeType","mime","setRequestHeader","value","statusCode","map","defineProperties","readyState","responseText","responseXML","responseJSON","statusText","asAborted","settings","deferred","$","Deferred","promise","noop","rejectWith","backbone","delay","retries","_b","condition","_c","ajaxPrefilter","tries","ajax","ORIGINAL_AJAX","call","handleAbort","timeoutId","clearTimeout","handleError","this","skipRetryOnCreate","model","retryOnCreate","methodIsCreate","_e","_d","sync","method","skipRetry","_f","_h","_g","setTimeout","resolve","createAjaxWithRetry","ORIGINAL_SYNC","createSyncWithRetry"],"mappings":"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"}